// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package database

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO 
    "User"
    (email) 
 VALUES (
  $1
)
RETURNING user_id, email
`

func (q *Queries) CreateUser(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, email)
	var i User
	err := row.Scan(&i.UserID, &i.Email)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM "User"
WHERE user_id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, userID int32) error {
	_, err := q.db.ExecContext(ctx, deleteUser, userID)
	return err
}

const getUser = `-- name: GetUser :one
SELECT user_id, email FROM "User"
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, userID int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, userID)
	var i User
	err := row.Scan(&i.UserID, &i.Email)
	return i, err
}

const listUserTrips = `-- name: ListUserTrips :many
SELECT trip_list_id, name, created_at, user_id, trip_id FROM TripList
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListUserTrips(ctx context.Context, userID int32) ([]Triplist, error) {
	rows, err := q.db.QueryContext(ctx, listUserTrips, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Triplist
	for rows.Next() {
		var i Triplist
		if err := rows.Scan(
			&i.TripListID,
			&i.Name,
			&i.CreatedAt,
			&i.UserID,
			&i.TripID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE "User"
  set email = $2
WHERE user_id = $1
`

type UpdateUserParams struct {
	UserID int32
	Email  string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser, arg.UserID, arg.Email)
	return err
}
